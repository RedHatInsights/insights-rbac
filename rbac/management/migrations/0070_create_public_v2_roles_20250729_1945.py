# Generated by Django 4.2.23 on 2025-07-29 19:45
from typing import Optional

from django.db import migrations


# If we have already written relations, then SeedingRelationApiDualWriteHandler determined the platform default role
# UUID by taking the UUID of the policy for the platform default group (see _get_platform_default_policy_uuid). So,
# if that group exists, we need to reuse its policy UUID.
def _existing_platform_default_users_uuid(apps, public_tenant) -> Optional[str]:
    Group = apps.get_model("management", "Group")

    try:
        return str(Group.objects.get(tenant=public_tenant, system=True, platform_default=True).policies.get().uuid)
    except Group.DoesNotExist:
        return None


# The same as above, but for the default admin group.
def _existing_platform_default_admin_uuid(apps, public_tenant) -> Optional[str]:
    Group = apps.get_model("management", "Group")

    try:
        return str(Group.objects.get(tenant=public_tenant, system=True, admin_default=True).policies.get().uuid)
    except Group.DoesNotExist:
        return None


def create_public_v2_roles(apps, schema_editor):
    Tenant = apps.get_model("api", "Tenant")
    RoleV2 = apps.get_model("management", "RoleV2")

    default_users_name = "platform-default-users"
    default_admins_name = "platform-default-admins"

    public_tenant = Tenant.objects.get(tenant_name="public")

    if RoleV2.objects.filter(tenant=public_tenant, name=default_users_name).exists():
        raise ValueError("The platform default users role already exists.")

    if RoleV2.objects.filter(tenant=public_tenant, name=default_admins_name).exists():
        raise ValueError("The platform default admins role already exists.")

    default_users_uuid = _existing_platform_default_users_uuid(apps=apps, public_tenant=public_tenant)
    default_admins_uuid = _existing_platform_default_admin_uuid(apps=apps, public_tenant=public_tenant)

    RoleV2.objects.create(
        tenant=public_tenant,
        name=default_users_name,
        display_name="Default user access",
        type="system",
        **({"uuid": default_users_uuid} if default_users_uuid is not None else {}),
    )

    RoleV2.objects.create(
        tenant=public_tenant,
        name=default_admins_name,
        display_name="Default admin access",
        type="system",
        **({"uuid": default_admins_uuid} if default_admins_uuid is not None else {}),
    )


class Migration(migrations.Migration):

    dependencies = [
        ("management", "0069_rolebinding_rolev2_rolebindingprincipal_and_more"),
    ]

    operations = [migrations.RunPython(create_public_v2_roles)]
